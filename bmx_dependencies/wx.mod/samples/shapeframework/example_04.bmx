SuperStrict
 
Framework wx.wxApp
Import wx.wxFrame
Import wx.wxPanel
Import wx.wxButton
Import wx.wxMouseEvent
Import wx.wxTextCtrl
Import wx.wxSlider
Import wx.wxGauge
Import wx.wxShapeFramework
 
New MyApp.Run()
 
Type MyApp Extends wxApp

	Method OnInit:Int()
	
		Local sim:wxSFExample4Frame = wxSFExample4Frame(New wxSFExample4Frame.Create(Null, wxID_ANY, ..
			"Example 4", -1, -1, 800, 600))
		sim.Show(True)
 
		Return True
	End Method

End Type

Type wxSFExample4Frame Extends wxFrame
 
	Field idMenuQuit:Int = wxID_EXIT
	Field idMenuAbout:Int = wxID_ABOUT


	Field controlType:Int

	Field manager:wxSFDiagramManager = New wxSFDiagramManager.Create()
	Field canvas:wxSFShapeCanvas

	Method OnInit()
		
		' Create a menu bar
		Local mbar:wxMenuBar = New wxMenuBar.Create()
		Local fileMenu:wxMenu = New wxMenu.Create()
		fileMenu.Append(idMenuQuit, "&Quit~tAlt-F4", "Quit the application")
		mbar.Append(fileMenu, "&File")
		
		Local helpMenu:wxMenu = New wxMenu.Create()
		helpMenu.Append(idMenuAbout, "&About~tF1", "Show info about this application")
		mbar.Append(helpMenu, "&Help")
		
		SetMenuBar(mbar)
		
		controlType = 0
		
		' set some diagram manager properties If necessary...
		' set accepted shapes (accept only wxSFControlShape)
		manager.AcceptShape("wxSFControlShape")
		
		' Create shape canvas And associate it with shape manager
		canvas = New wxSFShapeCanvas.Create(Self)
		canvas.SetDiagramManager(manager)
		
		' set some shape canvas properties If necessary...
		canvas.AddStyle(wxSFShapeCanvas.sfsGRID_USE)
		
		' connect event handlers To shape canvas
		canvas.ConnectAny(wxEVT_LEFT_DOWN, _OnLeftClickCanvas, Null, Self)
		canvas.ConnectAny(wxEVT_RIGHT_DOWN, _OnRightClickCanvas, Null, Self)
		
		' Create a status bar with some information about the used wxWidgets version
		CreateStatusBar(2)
		SetStatusText("Hello wxShapeFramework user!",0)
		SetStatusText("", 1)

		Center()
	End Method
	
	Method CreateGUIControl:wxWindow()
	
		controlType = ( controlType + 1 ) Mod 5
		
		Select controlType
			Case 0
				Return New wxButton.Create(canvas, wxID_ANY, "Hello World!", -1, -1, 100, 50)

			Case 1
				Return New wxTextCtrl.Create(canvas, wxID_ANY, "Hello World!", -1, -1, 150, 100, wxTE_MULTILINE)
			Case 2
				Return New wxSlider.Create(canvas, wxID_ANY, 50, 0, 100, -1, -1, 150, -1)
			Case 3
				Local ctrl:wxGauge = New wxGauge.Create(canvas, wxID_ANY, 50, -1, -1, 100, -1)
				ctrl.SetValue(25)
				Return ctrl
			Case 4
				Return New TestPanel.Create(canvas, wxID_ANY, -1, -1, 150, 100)
		End Select
		
	End Method
	
	Function _OnClose(event:wxEvent)
		wxSFExample4Frame(event.parent).OnClose(wxCloseEvent(event))
	End Function

	Method OnClose(event:wxCloseEvent)
	End Method
	
	Function _OnQuit(event:wxEvent)
		wxSFExample4Frame(event.parent).OnQuit(wxCommandEvent(event))
	End Function

	Method OnQuit(event:wxCommandEvent)
	End Method
	
	Function _OnAbout(event:wxEvent)
		wxSFExample4Frame(event.parent).OnAbout(wxCommandEvent(event))
	End Function
	
	Method OnAbout(event:wxCommandEvent)
	End Method

	
	' event handlers For wxShapeCanvas
	Function _OnLeftClickCanvas(event:wxEvent)
		wxSFExample4Frame(event.sink).OnLeftClickCanvas(wxMouseEvent(event))
	End Function

	Method OnLeftClickCanvas(event:wxMouseEvent)
		' HINT: perform your user actions here...
		
		' ... and then process standard canvas operations
		event.Skip()
	End Method
	
	Function _OnRightClickCanvas(event:wxEvent)
		wxSFExample4Frame(event.sink).OnRightClickCanvas(wxMouseEvent(event))
	End Function

	Method OnRightClickCanvas(event:wxMouseEvent)
		Local x:Int, y:Int
		event.GetPosition(x, y)

		Local shape:wxSFControlShape = wxSFControlShape(manager.AddShape("wxSFControlShape", x, y))

		If shape Then
		
			' set accepted child shapes for the new shape
			shape.ClearAcceptedChilds()
			
			' Some visual aspects can be set here:
			shape.SetControlOffset(5)
			'pShape.SetModBorder(*wxTRANSPARENT_PEN)
			'pShape.SetModFill(wxBrush(*wxRED, wxCROSSDIAG_HATCH))
			
			' Assign managed GUI control to the canvas. Remember the control shape now owns the GUI control and it is
			' deleted by the shape control in its destructor. If you want to remove the GUI control from the parent shape
			' just assign a new control or NULL value to it. You can also specify whether managed GUI control
			' is resized in accordance to dimensions of its parent control shape or vice versa.
			shape.SetControl(CreateGUIControl(), True)
			
			' You can specify whether events generated by the managed control are processed by the shape canvas
			' or/and the widget as well. Note that GUI controls differ in a way how they process events
			' so the behaviour can be different for various widgets.
			shape.SetEventProcessing(wxSFControlShape.evtMOUSE2CANVAS | wxSFControlShape.evtKEY2CANVAS)
			'pShape.SetEventProcessing(wxSFControlShape::evtMOUSE2GUI | wxSFControlShape::evtKEY2GUI)
		
		End If
	
	    ' ... And process standard canvas operations
	    event.Skip()
	End Method
	
	
End Type

Type TestPanel Extends wxPanel

	Const idResize:Int = wxID_HIGHEST + 1

	Field btnResize:wxButton
	Field big:Int

	Method OnInit()
		big = False
		btnResize = New wxButton.Create(Self, idResize, "Resize me!!!", 10, 10)

		Connect( idResize, wxEVT_COMMAND_BUTTON_CLICKED, _OnBtnResize )

		SetBackgroundColour(New wxColour.Create(100, 100, 200))

	End Method
	
	Function _OnBtnResize(event:wxEvent)
		TestPanel(event.parent).OnBtnResize(wxCommandEvent(event))
	End Function
	
	Method OnBtnResize(event:wxCommandEvent)
		Local w:Int, h:Int
		GetClientSize(w, h)
		
		If Not big Then
			SetClientSize(w + 50, h + 50)
		Else
			SetClientSize(w - 50, h - 50)
		End If

		big = Not big
	End Method

End Type
