/*
  Copyright (c) 2007-2018 Bruce A Henderson
 
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
*/ 

#include "glue.h"

#define LINK_LEXER(lexer) extern LexerModule lexer; Catalogue::AddLexerModule(&lexer);

void bmx_init_scintilla_modules() {

	LINK_LEXER(lmBlitzMax);

}

// ---------------------------------------------------------------------------------------

MaxScintilla::MaxScintilla(BBObject * handle, wxWindow * parent, wxWindowID id, int x, int y, int w, int h, long style)
	: wxScintilla(parent, id, wxPoint(x, y), wxSize(w, h), style)
{
	wxbind(this, handle);
}

MaxScintilla::~MaxScintilla() {
	wxunbind(this);
}

// *********************************************

BEGIN_EVENT_TABLE(MaxScintilla, wxScintilla)
END_EVENT_TABLE()


MaxScintilla * bmx_wxscintilla_create(BBObject * handle, wxWindow * parent, wxWindowID id, int x, int y,
		int w, int h, int style) {
	return new MaxScintilla(handle, parent, id, x, y, w, h, style);
}

int bmx_wxscintilla_getcurrentline(wxScintilla * sc) {
	return sc->GetCurrentLine();
}

void bmx_wxscintilla_stylesetspec(wxScintilla * sc, int style, BBString * spec) {
	sc->StyleSetSpec(style, wxStringFromBBString(spec));
}

void bmx_wxscintilla_stylesetfontfont(wxScintilla * sc, int style, MaxFont * font) {
	sc->StyleSetFont(style, font->Font());
}

void bmx_wxscintilla_stylesetfontattr(wxScintilla * sc, int style, int size, BBString * faceName, int bold, int italic, int underline, wxFontEncoding encoding) {
	sc->StyleSetFontAttr(style, size, wxStringFromBBString(faceName), static_cast<bool>(bold), static_cast<bool>(italic), static_cast<bool>(underline), encoding);
}

void bmx_wxscintilla_stylesetfontencoding(wxScintilla * sc, int style, wxFontEncoding encoding) {
	sc->StyleSetFontEncoding(style, encoding);
}

void bmx_wxscintilla_cmdkeyexecute(wxScintilla * sc, int cmd) {
	sc->CmdKeyExecute(cmd);
}

void bmx_wxscintilla_setmargins(wxScintilla * sc, int leftMargin, int rightMargin) {
	sc->SetMargins(leftMargin, rightMargin);
}

void bmx_wxscintilla_getselection(wxScintilla * sc, int * startPos, int * endPos) {
	sc->GetSelection(startPos, endPos);
}

void bmx_wxscintilla_pointfromposition(wxScintilla * sc, int pos, int * x, int * y) {
	wxPoint p(sc->PointFromPosition(pos));
	*x = p.x;
	*y = p.y;
}

void bmx_wxscintilla_scrolltoline(wxScintilla * sc, int line) {
	sc->ScrollToLine(line);
}

void bmx_wxscintilla_scrolltocolumn(wxScintilla * sc, int column) {
	sc->ScrollToColumn(column);
}

void bmx_wxscintilla_setvscrollbar(wxScintilla * sc, wxScrollBar * bar) {
	sc->SetVScrollBar(bar);
}

void bmx_wxscintilla_sethscrollbar(wxScintilla * sc, wxScrollBar * bar) {
	sc->SetHScrollBar(bar);
}

int bmx_wxscintilla_getlastkeydownprocessed(wxScintilla * sc) {
	return static_cast<int>(sc->GetLastKeydownProcessed());
}

void bmx_wxscintilla_setlastkeydownprocessed(wxScintilla * sc, int val) {
	sc->SetLastKeydownProcessed(static_cast<bool>(val));
}

int bmx_wxscintilla_savefile(wxScintilla * sc, BBString * filename) {
	return static_cast<int>(sc->SaveFile(wxStringFromBBString(filename)));
}

int bmx_wxscintilla_loadfile(wxScintilla * sc, BBString * filename) {
	return static_cast<int>(sc->LoadFile(wxStringFromBBString(filename)));
}

void bmx_wxscintilla_setuseantialiasing(wxScintilla * sc, int useAA) {
	sc->SetUseAntiAliasing(static_cast<bool>(useAA));
}

int bmx_wxscintilla_getuseantialiasing(wxScintilla * sc) {
	return static_cast<int>(sc->GetUseAntiAliasing());
}

void bmx_wxscintilla_cmdkeyassign(wxScintilla * sc, int key, int modifiers, int cmd) {
	sc->CmdKeyAssign(key, modifiers, cmd);
}

void bmx_wxscintilla_cmdkeyclear(wxScintilla * sc, int key, int modifiers) {
	sc->CmdKeyClear(key, modifiers);
}

//++Autogenerated
void bmx_wxscintilla_addtext(wxScintilla * sc, BBString * text) {
	sc->AddText(wxStringFromBBString(text));
}

void bmx_wxscintilla_inserttext(wxScintilla * sc, int pos, BBString * text) {
	sc->InsertText(pos, wxStringFromBBString(text));
}

void bmx_wxscintilla_clearall(wxScintilla * sc) {
	sc->ClearAll();
}

void bmx_wxscintilla_deleterange(wxScintilla * sc, int pos, int deleteLength) {
	sc->DeleteRange(pos, deleteLength);
}

void bmx_wxscintilla_cleardocumentstyle(wxScintilla * sc) {
	sc->ClearDocumentStyle();
}

int bmx_wxscintilla_getlength(wxScintilla * sc) {
	return sc->GetLength();
}

int bmx_wxscintilla_getcharat(wxScintilla * sc, int pos) {
	return sc->GetCharAt(pos);
}

int bmx_wxscintilla_getcurrentpos(wxScintilla * sc) {
	return sc->GetCurrentPos();
}

int bmx_wxscintilla_getanchor(wxScintilla * sc) {
	return sc->GetAnchor();
}

int bmx_wxscintilla_getstyleat(wxScintilla * sc, int pos) {
	return sc->GetStyleAt(pos);
}

void bmx_wxscintilla_redo(wxScintilla * sc) {
	sc->Redo();
}

void bmx_wxscintilla_setundocollection(wxScintilla * sc, int collectUndo) {
	sc->SetUndoCollection(collectUndo);
}

void bmx_wxscintilla_selectall(wxScintilla * sc) {
	sc->SelectAll();
}

void bmx_wxscintilla_setsavepoint(wxScintilla * sc) {
	sc->SetSavePoint();
}

int bmx_wxscintilla_canredo(wxScintilla * sc) {
	return sc->CanRedo();
}

int bmx_wxscintilla_markerlinefromhandle(wxScintilla * sc, int handle) {
	return sc->MarkerLineFromHandle(handle);
}

void bmx_wxscintilla_markerdeletehandle(wxScintilla * sc, int handle) {
	sc->MarkerDeleteHandle(handle);
}

int bmx_wxscintilla_getundocollection(wxScintilla * sc) {
	return sc->GetUndoCollection();
}

int bmx_wxscintilla_getviewwhitespace(wxScintilla * sc) {
	return sc->GetViewWhiteSpace();
}

void bmx_wxscintilla_setviewwhitespace(wxScintilla * sc, int viewWS) {
	sc->SetViewWhiteSpace(viewWS);
}

int bmx_wxscintilla_positionfrompoint(wxScintilla * sc, int x, int y) {
	return sc->PositionFromPoint(wxPoint(x, y));
}

int bmx_wxscintilla_positionfrompointclose(wxScintilla * sc, int x, int y) {
	return sc->PositionFromPointClose(x, y);
}

void bmx_wxscintilla_gotoline(wxScintilla * sc, int line) {
	sc->GotoLine(line);
}

void bmx_wxscintilla_gotopos(wxScintilla * sc, int pos) {
	sc->GotoPos(pos);
}

void bmx_wxscintilla_setanchor(wxScintilla * sc, int posAnchor) {
	sc->SetAnchor(posAnchor);
}

BBString * bmx_wxscintilla_getcurline(wxScintilla * sc, int * index) {
	return bbStringFromWxString(sc->GetCurLine(index));
}

int bmx_wxscintilla_getendstyled(wxScintilla * sc) {
	return sc->GetEndStyled();
}

void bmx_wxscintilla_converteols(wxScintilla * sc, int eolMode) {
	sc->ConvertEOLs(eolMode);
}

int bmx_wxscintilla_geteolmode(wxScintilla * sc) {
	return sc->GetEOLMode();
}

void bmx_wxscintilla_seteolmode(wxScintilla * sc, int eolMode) {
	sc->SetEOLMode(eolMode);
}

void bmx_wxscintilla_startstyling(wxScintilla * sc, int pos, int mask) {
	sc->StartStyling(pos, mask);
}

void bmx_wxscintilla_setstyling(wxScintilla * sc, int length, int style) {
	sc->SetStyling(length, style);
}

int bmx_wxscintilla_getbuffereddraw(wxScintilla * sc) {
	return sc->GetBufferedDraw();
}

void bmx_wxscintilla_setbuffereddraw(wxScintilla * sc, int buffered) {
	sc->SetBufferedDraw(buffered);
}

void bmx_wxscintilla_settabwidth(wxScintilla * sc, int tabWidth) {
	sc->SetTabWidth(tabWidth);
}

int bmx_wxscintilla_gettabwidth(wxScintilla * sc) {
	return sc->GetTabWidth();
}

void bmx_wxscintilla_setcodepage(wxScintilla * sc, int codePage) {
	sc->SetCodePage(codePage);
}

void bmx_wxscintilla_markerdefine(wxScintilla * sc, int markerNumber, int markerSymbol) {
	sc->MarkerDefine(markerNumber, markerSymbol);
}

void bmx_wxscintilla_markersetforeground(wxScintilla * sc, int markerNumber, MaxColour * fore) {
	sc->MarkerSetForeground(markerNumber, fore->Colour());
}

void bmx_wxscintilla_markersetbackground(wxScintilla * sc, int markerNumber, MaxColour * back) {
	sc->MarkerSetBackground(markerNumber, back->Colour());
}

void bmx_wxscintilla_markersetbackgroundselected(wxScintilla * sc, int markerNumber, MaxColour * back) {
	sc->MarkerSetBackgroundSelected(markerNumber, back->Colour());
}

void bmx_wxscintilla_markerenablehighlight(wxScintilla * sc, int enabled) {
	sc->MarkerEnableHighlight(enabled);
}

int bmx_wxscintilla_markeradd(wxScintilla * sc, int line, int markerNumber) {
	return sc->MarkerAdd(line, markerNumber);
}

void bmx_wxscintilla_markerdelete(wxScintilla * sc, int line, int markerNumber) {
	sc->MarkerDelete(line, markerNumber);
}

void bmx_wxscintilla_markerdeleteall(wxScintilla * sc, int markerNumber) {
	sc->MarkerDeleteAll(markerNumber);
}

int bmx_wxscintilla_markerget(wxScintilla * sc, int line) {
	return sc->MarkerGet(line);
}

int bmx_wxscintilla_markernext(wxScintilla * sc, int lineStart, int markerMask) {
	return sc->MarkerNext(lineStart, markerMask);
}

int bmx_wxscintilla_markerprevious(wxScintilla * sc, int lineStart, int markerMask) {
	return sc->MarkerPrevious(lineStart, markerMask);
}

void bmx_wxscintilla_markerdefinebitmap(wxScintilla * sc, int markerNumber, MaxBitmap * bitmap) {
	sc->MarkerDefineBitmap(markerNumber, bitmap->Bitmap());
}

void bmx_wxscintilla_markeraddset(wxScintilla * sc, int line, int set) {
	sc->MarkerAddSet(line, set);
}

void bmx_wxscintilla_markersetalpha(wxScintilla * sc, int markerNumber, int alpha) {
	sc->MarkerSetAlpha(markerNumber, alpha);
}

void bmx_wxscintilla_setmargintype(wxScintilla * sc, int margin, int marginType) {
	sc->SetMarginType(margin, marginType);
}

int bmx_wxscintilla_getmargintype(wxScintilla * sc, int margin) {
	return sc->GetMarginType(margin);
}

void bmx_wxscintilla_setmarginwidth(wxScintilla * sc, int margin, int pixelWidth) {
	sc->SetMarginWidth(margin, pixelWidth);
}

int bmx_wxscintilla_getmarginwidth(wxScintilla * sc, int margin) {
	return sc->GetMarginWidth(margin);
}

void bmx_wxscintilla_setmarginmask(wxScintilla * sc, int margin, int mask) {
	sc->SetMarginMask(margin, mask);
}

int bmx_wxscintilla_getmarginmask(wxScintilla * sc, int margin) {
	return sc->GetMarginMask(margin);
}

void bmx_wxscintilla_setmarginsensitive(wxScintilla * sc, int margin, int sensitive) {
	sc->SetMarginSensitive(margin, sensitive);
}

int bmx_wxscintilla_getmarginsensitive(wxScintilla * sc, int margin) {
	return sc->GetMarginSensitive(margin);
}

void bmx_wxscintilla_setmargincursor(wxScintilla * sc, int margin, int cursor) {
	sc->SetMarginCursor(margin, cursor);
}

int bmx_wxscintilla_getmargincursor(wxScintilla * sc, int margin) {
	return sc->GetMarginCursor(margin);
}

void bmx_wxscintilla_styleclearall(wxScintilla * sc) {
	sc->StyleClearAll();
}

void bmx_wxscintilla_stylesetforeground(wxScintilla * sc, int style, MaxColour * fore) {
	sc->StyleSetForeground(style, fore->Colour());
}

void bmx_wxscintilla_stylesetbackground(wxScintilla * sc, int style, MaxColour * back) {
	sc->StyleSetBackground(style, back->Colour());
}

void bmx_wxscintilla_stylesetbold(wxScintilla * sc, int style, int bold) {
	sc->StyleSetBold(style, bold);
}

void bmx_wxscintilla_stylesetitalic(wxScintilla * sc, int style, int italic) {
	sc->StyleSetItalic(style, italic);
}

void bmx_wxscintilla_stylesetsize(wxScintilla * sc, int style, int sizePoints) {
	sc->StyleSetSize(style, sizePoints);
}

void bmx_wxscintilla_stylesetfacename(wxScintilla * sc, int style, BBString * fontName) {
	sc->StyleSetFaceName(style, wxStringFromBBString(fontName));
}

void bmx_wxscintilla_styleseteolfilled(wxScintilla * sc, int style, int filled) {
	sc->StyleSetEOLFilled(style, filled);
}

void bmx_wxscintilla_styleresetdefault(wxScintilla * sc) {
	sc->StyleResetDefault();
}

void bmx_wxscintilla_stylesetunderline(wxScintilla * sc, int style, int underline) {
	sc->StyleSetUnderline(style, underline);
}

MaxColour * bmx_wxscintilla_stylegetforeground(wxScintilla * sc, int style) {
	wxColour c(sc->StyleGetForeground(style));
	return new MaxColour(c);
}

MaxColour * bmx_wxscintilla_stylegetbackground(wxScintilla * sc, int style) {
	wxColour c(sc->StyleGetBackground(style));
	return new MaxColour(c);
}

int bmx_wxscintilla_stylegetbold(wxScintilla * sc, int style) {
	return sc->StyleGetBold(style);
}

int bmx_wxscintilla_stylegetitalic(wxScintilla * sc, int style) {
	return sc->StyleGetItalic(style);
}

int bmx_wxscintilla_stylegetsize(wxScintilla * sc, int style) {
	return sc->StyleGetSize(style);
}

BBString * bmx_wxscintilla_stylegetfacename(wxScintilla * sc, int style) {
	return bbStringFromWxString(sc->StyleGetFaceName(style));
}

int bmx_wxscintilla_stylegeteolfilled(wxScintilla * sc, int style) {
	return sc->StyleGetEOLFilled(style);
}

int bmx_wxscintilla_stylegetunderline(wxScintilla * sc, int style) {
	return sc->StyleGetUnderline(style);
}

int bmx_wxscintilla_stylegetcase(wxScintilla * sc, int style) {
	return sc->StyleGetCase(style);
}

int bmx_wxscintilla_stylegetvisible(wxScintilla * sc, int style) {
	return sc->StyleGetVisible(style);
}

int bmx_wxscintilla_stylegetchangeable(wxScintilla * sc, int style) {
	return sc->StyleGetChangeable(style);
}

int bmx_wxscintilla_stylegethotspot(wxScintilla * sc, int style) {
	return sc->StyleGetHotSpot(style);
}

void bmx_wxscintilla_stylesetcase(wxScintilla * sc, int style, int caseForce) {
	sc->StyleSetCase(style, caseForce);
}

void bmx_wxscintilla_stylesetsizefractional(wxScintilla * sc, int style, int caseForce) {
	sc->StyleSetSizeFractional(style, caseForce);
}

int bmx_wxscintilla_stylegetsizefractional(wxScintilla * sc, int style) {
	return sc->StyleGetSizeFractional(style);
}

void bmx_wxscintilla_stylesetweight(wxScintilla * sc, int style, int weight) {
	sc->StyleSetWeight(style, weight);
}

int bmx_wxscintilla_stylegetweight(wxScintilla * sc, int style) {
	return sc->StyleGetWeight(style);
}

void bmx_wxscintilla_stylesetcharacterset(wxScintilla * sc, int style, int characterSet) {
	sc->StyleSetCharacterSet(style, characterSet);
}

void bmx_wxscintilla_stylesethotspot(wxScintilla * sc, int style, int hotspot) {
	sc->StyleSetHotSpot(style, hotspot);
}

void bmx_wxscintilla_setselforeground(wxScintilla * sc, int useSetting, MaxColour * fore) {
	sc->SetSelForeground(useSetting, fore->Colour());
}

void bmx_wxscintilla_setselbackground(wxScintilla * sc, int useSetting, MaxColour * back) {
	sc->SetSelBackground(useSetting, back->Colour());
}

int bmx_wxscintilla_getselalpha(wxScintilla * sc) {
	return sc->GetSelAlpha();
}

void bmx_wxscintilla_setselalpha(wxScintilla * sc, int alpha) {
	sc->SetSelAlpha(alpha);
}

int bmx_wxscintilla_getseleolfilled(wxScintilla * sc) {
	return sc->GetSelEOLFilled();
}

void bmx_wxscintilla_setseleolfilled(wxScintilla * sc, int filled) {
	sc->SetSelEOLFilled(filled);
}

void bmx_wxscintilla_setcaretforeground(wxScintilla * sc, MaxColour * fore) {
	sc->SetCaretForeground(fore->Colour());
}

void bmx_wxscintilla_cmdkeyclearall(wxScintilla * sc) {
	sc->CmdKeyClearAll();
}

void bmx_wxscintilla_stylesetvisible(wxScintilla * sc, int style, int visible) {
	sc->StyleSetVisible(style, visible);
}

int bmx_wxscintilla_getcaretperiod(wxScintilla * sc) {
	return sc->GetCaretPeriod();
}

void bmx_wxscintilla_setcaretperiod(wxScintilla * sc, int periodMilliseconds) {
	sc->SetCaretPeriod(periodMilliseconds);
}

void bmx_wxscintilla_setwordchars(wxScintilla * sc, BBString * characters) {
	sc->SetWordChars(wxStringFromBBString(characters));
}

BBString * bmx_wxscintilla_getwordchars(wxScintilla * sc) {
	return bbStringFromWxString(sc->GetWordChars());
}

void bmx_wxscintilla_beginundoaction(wxScintilla * sc) {
	sc->BeginUndoAction();
}

void bmx_wxscintilla_endundoaction(wxScintilla * sc) {
	sc->EndUndoAction();
}

void bmx_wxscintilla_indicatorsetstyle(wxScintilla * sc, int indic, int style) {
	sc->IndicatorSetStyle(indic, style);
}

int bmx_wxscintilla_indicatorgetstyle(wxScintilla * sc, int indic) {
	return sc->IndicatorGetStyle(indic);
}

void bmx_wxscintilla_indicatorsetforeground(wxScintilla * sc, int indic, MaxColour * fore) {
	sc->IndicatorSetForeground(indic, fore->Colour());
}

MaxColour * bmx_wxscintilla_indicatorgetforeground(wxScintilla * sc, int indic) {
	wxColour c(sc->IndicatorGetForeground(indic));
	return new MaxColour(c);
}

void bmx_wxscintilla_setwhitespaceforeground(wxScintilla * sc, int useSetting, MaxColour * fore) {
	sc->SetWhitespaceForeground(useSetting, fore->Colour());
}

void bmx_wxscintilla_setwhitespacebackground(wxScintilla * sc, int useSetting, MaxColour * back) {
	sc->SetWhitespaceBackground(useSetting, back->Colour());
}

void bmx_wxscintilla_setwhitespacesize(wxScintilla * sc, int size) {
	sc->SetWhitespaceSize(size);
}

int bmx_wxscintilla_getwhitespacesize(wxScintilla * sc) {
	return sc->GetWhitespaceSize();
}

void bmx_wxscintilla_setstylebits(wxScintilla * sc, int bits) {
	sc->SetStyleBits(bits);
}

int bmx_wxscintilla_getstylebits(wxScintilla * sc) {
	return sc->GetStyleBits();
}

void bmx_wxscintilla_setlinestate(wxScintilla * sc, int line, int state) {
	sc->SetLineState(line, state);
}

int bmx_wxscintilla_getlinestate(wxScintilla * sc, int line) {
	return sc->GetLineState(line);
}

int bmx_wxscintilla_getmaxlinestate(wxScintilla * sc) {
	return sc->GetMaxLineState();
}

int bmx_wxscintilla_getcaretlinevisible(wxScintilla * sc) {
	return sc->GetCaretLineVisible();
}

void bmx_wxscintilla_setcaretlinevisible(wxScintilla * sc, int show) {
	sc->SetCaretLineVisible(show);
}

MaxColour * bmx_wxscintilla_getcaretlinebackground(wxScintilla * sc) {
	wxColour c(sc->GetCaretLineBackground());
	return new MaxColour(c);
}

void bmx_wxscintilla_setcaretlinebackground(wxScintilla * sc, MaxColour * back) {
	sc->SetCaretLineBackground(back->Colour());
}

void bmx_wxscintilla_stylesetchangeable(wxScintilla * sc, int style, int changeable) {
	sc->StyleSetChangeable(style, changeable);
}

void bmx_wxscintilla_autocompshow(wxScintilla * sc, int lenEntered, BBString * itemList) {
	sc->AutoCompShow(lenEntered, wxStringFromBBString(itemList));
}

void bmx_wxscintilla_autocompcancel(wxScintilla * sc) {
	sc->AutoCompCancel();
}

int bmx_wxscintilla_autocompactive(wxScintilla * sc) {
	return sc->AutoCompActive();
}

int bmx_wxscintilla_autocompposstart(wxScintilla * sc) {
	return sc->AutoCompPosStart();
}

void bmx_wxscintilla_autocompcomplete(wxScintilla * sc) {
	sc->AutoCompComplete();
}

void bmx_wxscintilla_autocompstops(wxScintilla * sc, BBString * characterSet) {
	sc->AutoCompStops(wxStringFromBBString(characterSet));
}

void bmx_wxscintilla_autocompsetseparator(wxScintilla * sc, int separatorCharacter) {
	sc->AutoCompSetSeparator(separatorCharacter);
}

int bmx_wxscintilla_autocompgetseparator(wxScintilla * sc) {
	return sc->AutoCompGetSeparator();
}

void bmx_wxscintilla_autocompselect(wxScintilla * sc, BBString * text) {
	sc->AutoCompSelect(wxStringFromBBString(text));
}

void bmx_wxscintilla_autocompsetcancelatstart(wxScintilla * sc, int cancel) {
	sc->AutoCompSetCancelAtStart(cancel);
}

int bmx_wxscintilla_autocompgetcancelatstart(wxScintilla * sc) {
	return sc->AutoCompGetCancelAtStart();
}

void bmx_wxscintilla_autocompsetfillups(wxScintilla * sc, BBString * characterSet) {
	sc->AutoCompSetFillUps(wxStringFromBBString(characterSet));
}

void bmx_wxscintilla_autocompsetchoosesingle(wxScintilla * sc, int chooseSingle) {
	sc->AutoCompSetChooseSingle(chooseSingle);
}

int bmx_wxscintilla_autocompgetchoosesingle(wxScintilla * sc) {
	return sc->AutoCompGetChooseSingle();
}

void bmx_wxscintilla_autocompsetignorecase(wxScintilla * sc, int ignoreCase) {
	sc->AutoCompSetIgnoreCase(ignoreCase);
}

int bmx_wxscintilla_autocompgetignorecase(wxScintilla * sc) {
	return sc->AutoCompGetIgnoreCase();
}

void bmx_wxscintilla_userlistshow(wxScintilla * sc, int listType, BBString * itemList) {
	sc->UserListShow(listType, wxStringFromBBString(itemList));
}

void bmx_wxscintilla_autocompsetautohide(wxScintilla * sc, int autoHide) {
	sc->AutoCompSetAutoHide(autoHide);
}

int bmx_wxscintilla_autocompgetautohide(wxScintilla * sc) {
	return sc->AutoCompGetAutoHide();
}

void bmx_wxscintilla_autocompsetdroprestofword(wxScintilla * sc, int dropRestOfWord) {
	sc->AutoCompSetDropRestOfWord(dropRestOfWord);
}

int bmx_wxscintilla_autocompgetdroprestofword(wxScintilla * sc) {
	return sc->AutoCompGetDropRestOfWord();
}

void bmx_wxscintilla_registerimage(wxScintilla * sc, int type, MaxBitmap * bitmap) {
	sc->RegisterImage(type, bitmap->Bitmap());
}

void bmx_wxscintilla_clearregisteredimages(wxScintilla * sc) {
	sc->ClearRegisteredImages();
}

int bmx_wxscintilla_autocompgettypeseparator(wxScintilla * sc) {
	return sc->AutoCompGetTypeSeparator();
}

void bmx_wxscintilla_autocompsettypeseparator(wxScintilla * sc, int separatorCharacter) {
	sc->AutoCompSetTypeSeparator(separatorCharacter);
}

void bmx_wxscintilla_autocompsetmaxwidth(wxScintilla * sc, int characterCount) {
	sc->AutoCompSetMaxWidth(characterCount);
}

int bmx_wxscintilla_autocompgetmaxwidth(wxScintilla * sc) {
	return sc->AutoCompGetMaxWidth();
}

void bmx_wxscintilla_autocompsetmaxheight(wxScintilla * sc, int rowCount) {
	sc->AutoCompSetMaxHeight(rowCount);
}

int bmx_wxscintilla_autocompgetmaxheight(wxScintilla * sc) {
	return sc->AutoCompGetMaxHeight();
}

void bmx_wxscintilla_setindent(wxScintilla * sc, int indentSize) {
	sc->SetIndent(indentSize);
}

int bmx_wxscintilla_getindent(wxScintilla * sc) {
	return sc->GetIndent();
}

void bmx_wxscintilla_setusetabs(wxScintilla * sc, int useTabs) {
	sc->SetUseTabs(useTabs);
}

int bmx_wxscintilla_getusetabs(wxScintilla * sc) {
	return sc->GetUseTabs();
}

void bmx_wxscintilla_setlineindentation(wxScintilla * sc, int line, int indentSize) {
	sc->SetLineIndentation(line, indentSize);
}

int bmx_wxscintilla_getlineindentation(wxScintilla * sc, int line) {
	return sc->GetLineIndentation(line);
}

int bmx_wxscintilla_getlineindentposition(wxScintilla * sc, int line) {
	return sc->GetLineIndentPosition(line);
}

int bmx_wxscintilla_getcolumn(wxScintilla * sc, int pos) {
	return sc->GetColumn(pos);
}

int bmx_wxscintilla_countcharacters(wxScintilla * sc, int startPos, int endPos) {
	return sc->CountCharacters(startPos, endPos);
}

void bmx_wxscintilla_setusehorizontalscrollbar(wxScintilla * sc, int show) {
	sc->SetUseHorizontalScrollBar(show);
}

int bmx_wxscintilla_getusehorizontalscrollbar(wxScintilla * sc) {
	return sc->GetUseHorizontalScrollBar();
}

void bmx_wxscintilla_setindentationguides(wxScintilla * sc, int indentView) {
	sc->SetIndentationGuides(indentView);
}

int bmx_wxscintilla_getindentationguides(wxScintilla * sc) {
	return sc->GetIndentationGuides();
}

void bmx_wxscintilla_sethighlightguide(wxScintilla * sc, int column) {
	sc->SetHighlightGuide(column);
}

int bmx_wxscintilla_gethighlightguide(wxScintilla * sc) {
	return sc->GetHighlightGuide();
}

int bmx_wxscintilla_getlineendposition(wxScintilla * sc, int line) {
	return sc->GetLineEndPosition(line);
}

int bmx_wxscintilla_getcodepage(wxScintilla * sc) {
	return sc->GetCodePage();
}

MaxColour * bmx_wxscintilla_getcaretforeground(wxScintilla * sc) {
	wxColour c(sc->GetCaretForeground());
	return new MaxColour(c);
}

int bmx_wxscintilla_getreadonly(wxScintilla * sc) {
	return sc->GetReadOnly();
}

void bmx_wxscintilla_setcurrentpos(wxScintilla * sc, int pos) {
	sc->SetCurrentPos(pos);
}

void bmx_wxscintilla_setselectionstart(wxScintilla * sc, int pos) {
	sc->SetSelectionStart(pos);
}

int bmx_wxscintilla_getselectionstart(wxScintilla * sc) {
	return sc->GetSelectionStart();
}

void bmx_wxscintilla_setselectionend(wxScintilla * sc, int pos) {
	sc->SetSelectionEnd(pos);
}

int bmx_wxscintilla_getselectionend(wxScintilla * sc) {
	return sc->GetSelectionEnd();
}

void bmx_wxscintilla_setemptyselection(wxScintilla * sc, int pos) {
	sc->SetEmptySelection(pos);
}

void bmx_wxscintilla_setprintmagnification(wxScintilla * sc, int magnification) {
	sc->SetPrintMagnification(magnification);
}

int bmx_wxscintilla_getprintmagnification(wxScintilla * sc) {
	return sc->GetPrintMagnification();
}

void bmx_wxscintilla_setprintcolourmode(wxScintilla * sc, int mode) {
	sc->SetPrintColourMode(mode);
}

int bmx_wxscintilla_getprintcolourmode(wxScintilla * sc) {
	return sc->GetPrintColourMode();
}

int bmx_wxscintilla_findtext(wxScintilla * sc, int minPos, int maxPos, BBString * text, int flags) {
	return sc->FindText(minPos, maxPos, wxStringFromBBString(text), flags);
}

int bmx_wxscintilla_formatrange(wxScintilla * sc, bool doDraw, int start, int end, MaxDC * draw, MaxDC * target, MaxRect * renderRect, MaxRect * pageRect) {
	return sc->FormatRange(doDraw, start, end, draw->GetDC(), target->GetDC(), renderRect->Rect(), pageRect->Rect());
}

int bmx_wxscintilla_getfirstvisibleline(wxScintilla * sc) {
	return sc->GetFirstVisibleLine();
}

BBString * bmx_wxscintilla_getline(wxScintilla * sc, int line) {
	return bbStringFromWxString(sc->GetLine(line));
}

int bmx_wxscintilla_getlinecount(wxScintilla * sc) {
	return sc->GetLineCount();
}

void bmx_wxscintilla_setmarginleft(wxScintilla * sc, int pixelWidth) {
	sc->SetMarginLeft(pixelWidth);
}

int bmx_wxscintilla_getmarginleft(wxScintilla * sc) {
	return sc->GetMarginLeft();
}

void bmx_wxscintilla_setmarginright(wxScintilla * sc, int pixelWidth) {
	sc->SetMarginRight(pixelWidth);
}

int bmx_wxscintilla_getmarginright(wxScintilla * sc) {
	return sc->GetMarginRight();
}

int bmx_wxscintilla_getmodify(wxScintilla * sc) {
	return sc->GetModify();
}

void bmx_wxscintilla_setselection(wxScintilla * sc, int start, int end) {
	sc->SetSelection(start, end);
}

BBString * bmx_wxscintilla_getselectedtext(wxScintilla * sc) {
	return bbStringFromWxString(sc->GetSelectedText());
}

BBString * bmx_wxscintilla_gettextrange(wxScintilla * sc, int start, int end) {
	return bbStringFromWxString(sc->GetTextRange(start, end));
}

void bmx_wxscintilla_hideselection(wxScintilla * sc, int normal) {
	sc->HideSelection(normal);
}

int bmx_wxscintilla_linefromposition(wxScintilla * sc, int pos) {
	return sc->LineFromPosition(pos);
}

int bmx_wxscintilla_positionfromline(wxScintilla * sc, int line) {
	return sc->PositionFromLine(line);
}

void bmx_wxscintilla_linescroll(wxScintilla * sc, int columns, int lines) {
	sc->LineScroll(columns, lines);
}

void bmx_wxscintilla_ensurecaretvisible(wxScintilla * sc) {
	sc->EnsureCaretVisible();
}

void bmx_wxscintilla_replaceselection(wxScintilla * sc, BBString * text) {
	sc->ReplaceSelection(wxStringFromBBString(text));
}

void bmx_wxscintilla_setreadonly(wxScintilla * sc, int readOnly) {
	sc->SetReadOnly(readOnly);
}

int bmx_wxscintilla_canpaste(wxScintilla * sc) {
	return sc->CanPaste();
}

int bmx_wxscintilla_canundo(wxScintilla * sc) {
	return sc->CanUndo();
}

void bmx_wxscintilla_emptyundobuffer(wxScintilla * sc) {
	sc->EmptyUndoBuffer();
}

void bmx_wxscintilla_undo(wxScintilla * sc) {
	sc->Undo();
}

void bmx_wxscintilla_cut(wxScintilla * sc) {
	sc->Cut();
}

void bmx_wxscintilla_copy(wxScintilla * sc) {
	sc->Copy();
}

void bmx_wxscintilla_paste(wxScintilla * sc) {
	sc->Paste();
}

void bmx_wxscintilla_clear(wxScintilla * sc) {
	sc->Clear();
}

void bmx_wxscintilla_settext(wxScintilla * sc, BBString * text) {
	sc->SetText(wxStringFromBBString(text));
}

BBString * bmx_wxscintilla_gettext(wxScintilla * sc) {
	return bbStringFromWxString(sc->GetText());
}

int bmx_wxscintilla_gettextlength(wxScintilla * sc) {
	return sc->GetTextLength();
}

void bmx_wxscintilla_setovertype(wxScintilla * sc, int overtype) {
	sc->SetOvertype(overtype);
}

int bmx_wxscintilla_getovertype(wxScintilla * sc) {
	return sc->GetOvertype();
}

void bmx_wxscintilla_setcaretwidth(wxScintilla * sc, int pixelWidth) {
	sc->SetCaretWidth(pixelWidth);
}

int bmx_wxscintilla_getcaretwidth(wxScintilla * sc) {
	return sc->GetCaretWidth();
}

void bmx_wxscintilla_settargetstart(wxScintilla * sc, int pos) {
	sc->SetTargetStart(pos);
}

int bmx_wxscintilla_gettargetstart(wxScintilla * sc) {
	return sc->GetTargetStart();
}

void bmx_wxscintilla_settargetend(wxScintilla * sc, int pos) {
	sc->SetTargetEnd(pos);
}

int bmx_wxscintilla_gettargetend(wxScintilla * sc) {
	return sc->GetTargetEnd();
}

int bmx_wxscintilla_replacetarget(wxScintilla * sc, BBString * text) {
	sc->ReplaceTarget(wxStringFromBBString(text));
}

int bmx_wxscintilla_replacetargetre(wxScintilla * sc, BBString * text) {
	sc->ReplaceTargetRE(wxStringFromBBString(text));
}

int bmx_wxscintilla_searchintarget(wxScintilla * sc, BBString * text) {
	sc->SearchInTarget(wxStringFromBBString(text));
}

void bmx_wxscintilla_setsearchflags(wxScintilla * sc, int flags) {
	sc->SetSearchFlags(flags);
}

int bmx_wxscintilla_getsearchflags(wxScintilla * sc) {
	return sc->GetSearchFlags();
}

void bmx_wxscintilla_calltipshow(wxScintilla * sc, int pos, BBString * definition) {
	sc->CallTipShow(pos, wxStringFromBBString(definition));
}

void bmx_wxscintilla_calltipcancel(wxScintilla * sc) {
	sc->CallTipCancel();
}

int bmx_wxscintilla_calltipactive(wxScintilla * sc) {
	return sc->CallTipActive();
}

int bmx_wxscintilla_calltipposatstart(wxScintilla * sc) {
	return sc->CallTipPosAtStart();
}

void bmx_wxscintilla_calltipsethighlight(wxScintilla * sc, int start, int end) {
	sc->CallTipSetHighlight(start, end);
}

void bmx_wxscintilla_calltipsetbackground(wxScintilla * sc, MaxColour * back) {
	sc->CallTipSetBackground(back->Colour());
}

void bmx_wxscintilla_calltipsetforeground(wxScintilla * sc, MaxColour * fore) {
	sc->CallTipSetForeground(fore->Colour());
}

void bmx_wxscintilla_calltipsetforegroundhighlight(wxScintilla * sc, MaxColour * fore) {
	sc->CallTipSetForegroundHighlight(fore->Colour());
}

void bmx_wxscintilla_calltipusestyle(wxScintilla * sc, int tabSize) {
	sc->CallTipUseStyle(tabSize);
}

void bmx_wxscintilla_calltipsetposition(wxScintilla * sc, int above) {
	sc->CallTipSetPosition(above);
}

int bmx_wxscintilla_visiblefromdocline(wxScintilla * sc, int line) {
	return sc->VisibleFromDocLine(line);
}

int bmx_wxscintilla_doclinefromvisible(wxScintilla * sc, int lineDisplay) {
	return sc->DocLineFromVisible(lineDisplay);
}

int bmx_wxscintilla_wrapcount(wxScintilla * sc, int line) {
	return sc->WrapCount(line);
}

void bmx_wxscintilla_setfoldlevel(wxScintilla * sc, int line, int level) {
	sc->SetFoldLevel(line, level);
}

int bmx_wxscintilla_getfoldlevel(wxScintilla * sc, int line) {
	return sc->GetFoldLevel(line);
}

int bmx_wxscintilla_getlastchild(wxScintilla * sc, int line, int level) {
	return sc->GetLastChild(line, level);
}

int bmx_wxscintilla_getfoldparent(wxScintilla * sc, int line) {
	return sc->GetFoldParent(line);
}

void bmx_wxscintilla_showlines(wxScintilla * sc, int lineStart, int lineEnd) {
	sc->ShowLines(lineStart, lineEnd);
}

void bmx_wxscintilla_hidelines(wxScintilla * sc, int lineStart, int lineEnd) {
	sc->HideLines(lineStart, lineEnd);
}

int bmx_wxscintilla_getlinevisible(wxScintilla * sc, int line) {
	return sc->GetLineVisible(line);
}

int bmx_wxscintilla_getalllinesvisible(wxScintilla * sc) {
	return sc->GetAllLinesVisible();
}

void bmx_wxscintilla_setfoldexpanded(wxScintilla * sc, int line, int expanded) {
	sc->SetFoldExpanded(line, expanded);
}

int bmx_wxscintilla_getfoldexpanded(wxScintilla * sc, int line) {
	return sc->GetFoldExpanded(line);
}

void bmx_wxscintilla_togglefold(wxScintilla * sc, int line) {
	sc->ToggleFold(line);
}

void bmx_wxscintilla_ensurevisible(wxScintilla * sc, int line) {
	sc->EnsureVisible(line);
}

void bmx_wxscintilla_setfoldflags(wxScintilla * sc, int flags) {
	sc->SetFoldFlags(flags);
}

void bmx_wxscintilla_ensurevisibleenforcepolicy(wxScintilla * sc, int line) {
	sc->EnsureVisibleEnforcePolicy(line);
}

void bmx_wxscintilla_settabindents(wxScintilla * sc, int tabIndents) {
	sc->SetTabIndents(tabIndents);
}

int bmx_wxscintilla_gettabindents(wxScintilla * sc) {
	return sc->GetTabIndents();
}

void bmx_wxscintilla_setbackspaceunindents(wxScintilla * sc, int bsUnIndents) {
	sc->SetBackSpaceUnIndents(bsUnIndents);
}

int bmx_wxscintilla_getbackspaceunindents(wxScintilla * sc) {
	return sc->GetBackSpaceUnIndents();
}

void bmx_wxscintilla_setmousedwelltime(wxScintilla * sc, int periodMilliseconds) {
	sc->SetMouseDwellTime(periodMilliseconds);
}

int bmx_wxscintilla_getmousedwelltime(wxScintilla * sc) {
	return sc->GetMouseDwellTime();
}

int bmx_wxscintilla_wordstartposition(wxScintilla * sc, int pos, int onlyWordCharacters) {
	return sc->WordStartPosition(pos, onlyWordCharacters);
}

int bmx_wxscintilla_wordendposition(wxScintilla * sc, int pos, int onlyWordCharacters) {
	return sc->WordEndPosition(pos, onlyWordCharacters);
}

void bmx_wxscintilla_setwrapmode(wxScintilla * sc, int mode) {
	sc->SetWrapMode(mode);
}

int bmx_wxscintilla_getwrapmode(wxScintilla * sc) {
	return sc->GetWrapMode();
}

void bmx_wxscintilla_setwrapvisualflags(wxScintilla * sc, int wrapVisualFlags) {
	sc->SetWrapVisualFlags(wrapVisualFlags);
}

int bmx_wxscintilla_getwrapvisualflags(wxScintilla * sc) {
	return sc->GetWrapVisualFlags();
}

void bmx_wxscintilla_setwrapvisualflagslocation(wxScintilla * sc, int wrapVisualFlagsLocation) {
	sc->SetWrapVisualFlagsLocation(wrapVisualFlagsLocation);
}

int bmx_wxscintilla_getwrapvisualflagslocation(wxScintilla * sc) {
	return sc->GetWrapVisualFlagsLocation();
}

void bmx_wxscintilla_setwrapstartindent(wxScintilla * sc, int indent) {
	sc->SetWrapStartIndent(indent);
}

int bmx_wxscintilla_getwrapstartindent(wxScintilla * sc) {
	return sc->GetWrapStartIndent();
}

void bmx_wxscintilla_setwrapindentmode(wxScintilla * sc, int mode) {
	sc->SetWrapIndentMode(mode);
}

int bmx_wxscintilla_getwrapindentmode(wxScintilla * sc) {
	return sc->GetWrapIndentMode();
}

void bmx_wxscintilla_setlayoutcache(wxScintilla * sc, int mode) {
	sc->SetLayoutCache(mode);
}

int bmx_wxscintilla_getlayoutcache(wxScintilla * sc) {
	return sc->GetLayoutCache();
}

void bmx_wxscintilla_setscrollwidth(wxScintilla * sc, int pixelWidth) {
	sc->SetScrollWidth(pixelWidth);
}

int bmx_wxscintilla_getscrollwidth(wxScintilla * sc) {
	return sc->GetScrollWidth();
}

void bmx_wxscintilla_setscrollwidthtracking(wxScintilla * sc, int tracking) {
	sc->SetScrollWidthTracking(tracking);
}

int bmx_wxscintilla_getscrollwidthtracking(wxScintilla * sc) {
	return sc->GetScrollWidthTracking();
}

int bmx_wxscintilla_textwidth(wxScintilla * sc, int style, BBString * text) {
	return sc->TextWidth(style, wxStringFromBBString(text));
}

void bmx_wxscintilla_setendatlastline(wxScintilla * sc, int endAtLastLine) {
	sc->SetEndAtLastLine(endAtLastLine);
}

int bmx_wxscintilla_getendatlastline(wxScintilla * sc) {
	return sc->GetEndAtLastLine();
}

int bmx_wxscintilla_textheight(wxScintilla * sc, int line) {
	return sc->TextHeight(line);
}

void bmx_wxscintilla_setuseverticalscrollbar(wxScintilla * sc, int show) {
	sc->SetUseVerticalScrollBar(show);
}

int bmx_wxscintilla_getuseverticalscrollbar(wxScintilla * sc) {
	return sc->GetUseVerticalScrollBar();
}

void bmx_wxscintilla_appendtext(wxScintilla * sc, BBString * text) {
	sc->AppendText(wxStringFromBBString(text));
}

int bmx_wxscintilla_gettwophasedraw(wxScintilla * sc) {
	return sc->GetTwoPhaseDraw();
}

void bmx_wxscintilla_settwophasedraw(wxScintilla * sc, int twoPhase) {
	sc->SetTwoPhaseDraw(twoPhase);
}

void bmx_wxscintilla_setfirstvisibleline(wxScintilla * sc, int lineDisplay) {
	sc->SetFirstVisibleLine(lineDisplay);
}

void bmx_wxscintilla_setmultipaste(wxScintilla * sc, int multiPaste) {
	sc->SetMultiPaste(multiPaste);
}

int bmx_wxscintilla_getmultipaste(wxScintilla * sc) {
	return sc->GetMultiPaste();
}

BBString * bmx_wxscintilla_gettag(wxScintilla * sc, int tagNumber) {
	return bbStringFromWxString(sc->GetTag(tagNumber));
}

void bmx_wxscintilla_targetfromselection(wxScintilla * sc) {
	sc->TargetFromSelection();
}

void bmx_wxscintilla_linesjoin(wxScintilla * sc) {
	sc->LinesJoin();
}

void bmx_wxscintilla_linessplit(wxScintilla * sc, int pixelWidth) {
	sc->LinesSplit(pixelWidth);
}

void bmx_wxscintilla_setfoldmargincolour(wxScintilla * sc, int useSetting, MaxColour * back) {
	sc->SetFoldMarginColour(useSetting, back->Colour());
}

void bmx_wxscintilla_setfoldmarginhicolour(wxScintilla * sc, int useSetting, MaxColour * fore) {
	sc->SetFoldMarginHiColour(useSetting, fore->Colour());
}

void bmx_wxscintilla_linedown(wxScintilla * sc) {
	sc->LineDown();
}

void bmx_wxscintilla_linedownextend(wxScintilla * sc) {
	sc->LineDownExtend();
}

void bmx_wxscintilla_lineup(wxScintilla * sc) {
	sc->LineUp();
}

void bmx_wxscintilla_lineupextend(wxScintilla * sc) {
	sc->LineUpExtend();
}

void bmx_wxscintilla_charleft(wxScintilla * sc) {
	sc->CharLeft();
}

void bmx_wxscintilla_charleftextend(wxScintilla * sc) {
	sc->CharLeftExtend();
}

void bmx_wxscintilla_charright(wxScintilla * sc) {
	sc->CharRight();
}

void bmx_wxscintilla_charrightextend(wxScintilla * sc) {
	sc->CharRightExtend();
}

void bmx_wxscintilla_wordleft(wxScintilla * sc) {
	sc->WordLeft();
}

void bmx_wxscintilla_wordleftextend(wxScintilla * sc) {
	sc->WordLeftExtend();
}

void bmx_wxscintilla_wordright(wxScintilla * sc) {
	sc->WordRight();
}

void bmx_wxscintilla_wordrightextend(wxScintilla * sc) {
	sc->WordRightExtend();
}

void bmx_wxscintilla_home(wxScintilla * sc) {
	sc->Home();
}

void bmx_wxscintilla_homeextend(wxScintilla * sc) {
	sc->HomeExtend();
}

void bmx_wxscintilla_lineend(wxScintilla * sc) {
	sc->LineEnd();
}

void bmx_wxscintilla_lineendextend(wxScintilla * sc) {
	sc->LineEndExtend();
}

void bmx_wxscintilla_documentstart(wxScintilla * sc) {
	sc->DocumentStart();
}

void bmx_wxscintilla_documentstartextend(wxScintilla * sc) {
	sc->DocumentStartExtend();
}

void bmx_wxscintilla_documentend(wxScintilla * sc) {
	sc->DocumentEnd();
}

void bmx_wxscintilla_documentendextend(wxScintilla * sc) {
	sc->DocumentEndExtend();
}

void bmx_wxscintilla_pageup(wxScintilla * sc) {
	sc->PageUp();
}

void bmx_wxscintilla_pageupextend(wxScintilla * sc) {
	sc->PageUpExtend();
}

void bmx_wxscintilla_pagedown(wxScintilla * sc) {
	sc->PageDown();
}

void bmx_wxscintilla_pagedownextend(wxScintilla * sc) {
	sc->PageDownExtend();
}

void bmx_wxscintilla_edittoggleovertype(wxScintilla * sc) {
	sc->EditToggleOvertype();
}

void bmx_wxscintilla_cancel(wxScintilla * sc) {
	sc->Cancel();
}

void bmx_wxscintilla_deleteback(wxScintilla * sc) {
	sc->DeleteBack();
}

void bmx_wxscintilla_tab(wxScintilla * sc) {
	sc->Tab();
}

void bmx_wxscintilla_backtab(wxScintilla * sc) {
	sc->BackTab();
}

void bmx_wxscintilla_newline(wxScintilla * sc) {
	sc->NewLine();
}

void bmx_wxscintilla_formfeed(wxScintilla * sc) {
	sc->FormFeed();
}

void bmx_wxscintilla_vchome(wxScintilla * sc) {
	sc->VCHome();
}

void bmx_wxscintilla_vchomeextend(wxScintilla * sc) {
	sc->VCHomeExtend();
}

void bmx_wxscintilla_zoomin(wxScintilla * sc) {
	sc->ZoomIn();
}

void bmx_wxscintilla_zoomout(wxScintilla * sc) {
	sc->ZoomOut();
}

void bmx_wxscintilla_delwordleft(wxScintilla * sc) {
	sc->DelWordLeft();
}

void bmx_wxscintilla_delwordright(wxScintilla * sc) {
	sc->DelWordRight();
}

void bmx_wxscintilla_delwordrightend(wxScintilla * sc) {
	sc->DelWordRightEnd();
}

void bmx_wxscintilla_linecut(wxScintilla * sc) {
	sc->LineCut();
}

void bmx_wxscintilla_linedelete(wxScintilla * sc) {
	sc->LineDelete();
}

void bmx_wxscintilla_linetranspose(wxScintilla * sc) {
	sc->LineTranspose();
}

void bmx_wxscintilla_lineduplicate(wxScintilla * sc) {
	sc->LineDuplicate();
}

void bmx_wxscintilla_lowercase(wxScintilla * sc) {
	sc->LowerCase();
}

void bmx_wxscintilla_uppercase(wxScintilla * sc) {
	sc->UpperCase();
}

void bmx_wxscintilla_linescrolldown(wxScintilla * sc) {
	sc->LineScrollDown();
}

void bmx_wxscintilla_linescrollup(wxScintilla * sc) {
	sc->LineScrollUp();
}

void bmx_wxscintilla_deletebacknotline(wxScintilla * sc) {
	sc->DeleteBackNotLine();
}

void bmx_wxscintilla_homedisplay(wxScintilla * sc) {
	sc->HomeDisplay();
}

void bmx_wxscintilla_homedisplayextend(wxScintilla * sc) {
	sc->HomeDisplayExtend();
}

void bmx_wxscintilla_lineenddisplay(wxScintilla * sc) {
	sc->LineEndDisplay();
}

void bmx_wxscintilla_lineenddisplayextend(wxScintilla * sc) {
	sc->LineEndDisplayExtend();
}

void bmx_wxscintilla_homewrap(wxScintilla * sc) {
	sc->HomeWrap();
}

void bmx_wxscintilla_homewrapextend(wxScintilla * sc) {
	sc->HomeWrapExtend();
}

void bmx_wxscintilla_lineendwrap(wxScintilla * sc) {
	sc->LineEndWrap();
}

void bmx_wxscintilla_lineendwrapextend(wxScintilla * sc) {
	sc->LineEndWrapExtend();
}

void bmx_wxscintilla_vchomewrap(wxScintilla * sc) {
	sc->VCHomeWrap();
}

void bmx_wxscintilla_vchomewrapextend(wxScintilla * sc) {
	sc->VCHomeWrapExtend();
}

void bmx_wxscintilla_linecopy(wxScintilla * sc) {
	sc->LineCopy();
}

void bmx_wxscintilla_movecaretinsideview(wxScintilla * sc) {
	sc->MoveCaretInsideView();
}

int bmx_wxscintilla_linelength(wxScintilla * sc, int line) {
	return sc->LineLength(line);
}

void bmx_wxscintilla_bracehighlight(wxScintilla * sc, int pos1, int pos2) {
	sc->BraceHighlight(pos1, pos2);
}

void bmx_wxscintilla_bracehighlightindicator(wxScintilla * sc, int useBraceHighlightIndicator, int indicator) {
	sc->BraceHighlightIndicator(useBraceHighlightIndicator, indicator);
}

void bmx_wxscintilla_bracebadlight(wxScintilla * sc, int pos) {
	sc->BraceBadLight(pos);
}

void bmx_wxscintilla_bracebadlightindicator(wxScintilla * sc, int useBraceBadLightIndicator, int indicator) {
	sc->BraceBadLightIndicator(useBraceBadLightIndicator, indicator);
}

int bmx_wxscintilla_bracematch(wxScintilla * sc, int pos) {
	return sc->BraceMatch(pos);
}

int bmx_wxscintilla_getvieweol(wxScintilla * sc) {
	return sc->GetViewEOL();
}

void bmx_wxscintilla_setvieweol(wxScintilla * sc, int visible) {
	sc->SetViewEOL(visible);
}

void * bmx_wxscintilla_getdocpointer(wxScintilla * sc) {
	return sc->GetDocPointer();
}

void bmx_wxscintilla_setdocpointer(wxScintilla * sc, void * docPointer) {
	sc->SetDocPointer(docPointer);
}

void bmx_wxscintilla_setmodeventmask(wxScintilla * sc, int mask) {
	sc->SetModEventMask(mask);
}

int bmx_wxscintilla_getedgecolumn(wxScintilla * sc) {
	return sc->GetEdgeColumn();
}

void bmx_wxscintilla_setedgecolumn(wxScintilla * sc, int column) {
	sc->SetEdgeColumn(column);
}

int bmx_wxscintilla_getedgemode(wxScintilla * sc) {
	return sc->GetEdgeMode();
}

void bmx_wxscintilla_setedgemode(wxScintilla * sc, int mode) {
	sc->SetEdgeMode(mode);
}

MaxColour * bmx_wxscintilla_getedgecolour(wxScintilla * sc) {
	wxColour c(sc->GetEdgeColour());
	return new MaxColour(c);
}

void bmx_wxscintilla_setedgecolour(wxScintilla * sc, MaxColour * edgeColour) {
	sc->SetEdgeColour(edgeColour->Colour());
}

void bmx_wxscintilla_searchanchor(wxScintilla * sc) {
	sc->SearchAnchor();
}

int bmx_wxscintilla_searchnext(wxScintilla * sc, int flags, BBString * text) {
	return sc->SearchNext(flags, wxStringFromBBString(text));
}

int bmx_wxscintilla_searchprev(wxScintilla * sc, int flags, BBString * text) {
	return sc->SearchPrev(flags, wxStringFromBBString(text));
}

int bmx_wxscintilla_linesonscreen(wxScintilla * sc) {
	return sc->LinesOnScreen();
}

void bmx_wxscintilla_usepopup(wxScintilla * sc, int allowPopUp) {
	sc->UsePopUp(allowPopUp);
}

int bmx_wxscintilla_selectionisrectangle(wxScintilla * sc) {
	return sc->SelectionIsRectangle();
}

void bmx_wxscintilla_setzoom(wxScintilla * sc, int zoom) {
	sc->SetZoom(zoom);
}

int bmx_wxscintilla_getzoom(wxScintilla * sc) {
	return sc->GetZoom();
}

void * bmx_wxscintilla_createdocument(wxScintilla * sc) {
	return sc->CreateDocument();
}

void bmx_wxscintilla_addrefdocument(wxScintilla * sc, void * docPointer) {
	sc->AddRefDocument(docPointer);
}

void bmx_wxscintilla_releasedocument(wxScintilla * sc, void * docPointer) {
	sc->ReleaseDocument(docPointer);
}

int bmx_wxscintilla_getmodeventmask(wxScintilla * sc) {
	return sc->GetModEventMask();
}

void bmx_wxscintilla_setstcfocus(wxScintilla * sc, int focus) {
	sc->SetSTCFocus(focus);
}

int bmx_wxscintilla_getstcfocus(wxScintilla * sc) {
	return sc->GetSTCFocus();
}

void bmx_wxscintilla_setstatus(wxScintilla * sc, int statusCode) {
	sc->SetStatus(statusCode);
}

int bmx_wxscintilla_getstatus(wxScintilla * sc) {
	return sc->GetStatus();
}

void bmx_wxscintilla_setmousedowncaptures(wxScintilla * sc, int captures) {
	sc->SetMouseDownCaptures(captures);
}

int bmx_wxscintilla_getmousedowncaptures(wxScintilla * sc) {
	return sc->GetMouseDownCaptures();
}

void bmx_wxscintilla_setcontrolcharsymbol(wxScintilla * sc, int symbol) {
	sc->SetControlCharSymbol(symbol);
}

int bmx_wxscintilla_getcontrolcharsymbol(wxScintilla * sc) {
	return sc->GetControlCharSymbol();
}

void bmx_wxscintilla_wordpartleft(wxScintilla * sc) {
	sc->WordPartLeft();
}

void bmx_wxscintilla_wordpartleftextend(wxScintilla * sc) {
	sc->WordPartLeftExtend();
}

void bmx_wxscintilla_wordpartright(wxScintilla * sc) {
	sc->WordPartRight();
}

void bmx_wxscintilla_wordpartrightextend(wxScintilla * sc) {
	sc->WordPartRightExtend();
}

void bmx_wxscintilla_setvisiblepolicy(wxScintilla * sc, int visiblePolicy, int visibleSlop) {
	sc->SetVisiblePolicy(visiblePolicy, visibleSlop);
}

void bmx_wxscintilla_dellineleft(wxScintilla * sc) {
	sc->DelLineLeft();
}

void bmx_wxscintilla_dellineright(wxScintilla * sc) {
	sc->DelLineRight();
}

void bmx_wxscintilla_setxoffset(wxScintilla * sc, int newOffset) {
	sc->SetXOffset(newOffset);
}

int bmx_wxscintilla_getxoffset(wxScintilla * sc) {
	return sc->GetXOffset();
}

void bmx_wxscintilla_choosecaretx(wxScintilla * sc) {
	sc->ChooseCaretX();
}

void bmx_wxscintilla_setxcaretpolicy(wxScintilla * sc, int caretPolicy, int caretSlop) {
	sc->SetXCaretPolicy(caretPolicy, caretSlop);
}

void bmx_wxscintilla_setycaretpolicy(wxScintilla * sc, int caretPolicy, int caretSlop) {
	sc->SetYCaretPolicy(caretPolicy, caretSlop);
}

void bmx_wxscintilla_setprintwrapmode(wxScintilla * sc, int mode) {
	sc->SetPrintWrapMode(mode);
}

int bmx_wxscintilla_getprintwrapmode(wxScintilla * sc) {
	return sc->GetPrintWrapMode();
}

void bmx_wxscintilla_sethotspotactiveforeground(wxScintilla * sc, int useSetting, MaxColour * fore) {
	sc->SetHotspotActiveForeground(useSetting, fore->Colour());
}

void bmx_wxscintilla_sethotspotactivebackground(wxScintilla * sc, int useSetting, MaxColour * back) {
	sc->SetHotspotActiveBackground(useSetting, back->Colour());
}

void bmx_wxscintilla_sethotspotactiveunderline(wxScintilla * sc, int underline) {
	sc->SetHotspotActiveUnderline(underline);
}

void bmx_wxscintilla_sethotspotsingleline(wxScintilla * sc, int singleLine) {
	sc->SetHotspotSingleLine(singleLine);
}

void bmx_wxscintilla_paradown(wxScintilla * sc) {
	sc->ParaDown();
}

void bmx_wxscintilla_paradownextend(wxScintilla * sc) {
	sc->ParaDownExtend();
}

void bmx_wxscintilla_paraup(wxScintilla * sc) {
	sc->ParaUp();
}

void bmx_wxscintilla_paraupextend(wxScintilla * sc) {
	sc->ParaUpExtend();
}

int bmx_wxscintilla_positionbefore(wxScintilla * sc, int pos) {
	return sc->PositionBefore(pos);
}

int bmx_wxscintilla_positionafter(wxScintilla * sc, int pos) {
	return sc->PositionAfter(pos);
}

void bmx_wxscintilla_copyrange(wxScintilla * sc, int start, int end) {
	sc->CopyRange(start, end);
}

void bmx_wxscintilla_setselectionmode(wxScintilla * sc, int mode) {
	sc->SetSelectionMode(mode);
}

int bmx_wxscintilla_getselectionmode(wxScintilla * sc) {
	return sc->GetSelectionMode();
}

int bmx_wxscintilla_getlineselstartposition(wxScintilla * sc, int line) {
	return sc->GetLineSelStartPosition(line);
}

int bmx_wxscintilla_getlineselendposition(wxScintilla * sc, int line) {
	return sc->GetLineSelEndPosition(line);
}

void bmx_wxscintilla_linedownrectextend(wxScintilla * sc) {
	sc->LineDownRectExtend();
}

void bmx_wxscintilla_lineuprectextend(wxScintilla * sc) {
	sc->LineUpRectExtend();
}

void bmx_wxscintilla_charleftrectextend(wxScintilla * sc) {
	sc->CharLeftRectExtend();
}

void bmx_wxscintilla_charrightrectextend(wxScintilla * sc) {
	sc->CharRightRectExtend();
}

void bmx_wxscintilla_homerectextend(wxScintilla * sc) {
	sc->HomeRectExtend();
}

void bmx_wxscintilla_vchomerectextend(wxScintilla * sc) {
	sc->VCHomeRectExtend();
}

void bmx_wxscintilla_lineendrectextend(wxScintilla * sc) {
	sc->LineEndRectExtend();
}

void bmx_wxscintilla_pageuprectextend(wxScintilla * sc) {
	sc->PageUpRectExtend();
}

void bmx_wxscintilla_pagedownrectextend(wxScintilla * sc) {
	sc->PageDownRectExtend();
}

void bmx_wxscintilla_stutteredpageup(wxScintilla * sc) {
	sc->StutteredPageUp();
}

void bmx_wxscintilla_stutteredpageupextend(wxScintilla * sc) {
	sc->StutteredPageUpExtend();
}

void bmx_wxscintilla_stutteredpagedown(wxScintilla * sc) {
	sc->StutteredPageDown();
}

void bmx_wxscintilla_stutteredpagedownextend(wxScintilla * sc) {
	sc->StutteredPageDownExtend();
}

void bmx_wxscintilla_wordleftend(wxScintilla * sc) {
	sc->WordLeftEnd();
}

void bmx_wxscintilla_wordleftendextend(wxScintilla * sc) {
	sc->WordLeftEndExtend();
}

void bmx_wxscintilla_wordrightend(wxScintilla * sc) {
	sc->WordRightEnd();
}

void bmx_wxscintilla_wordrightendextend(wxScintilla * sc) {
	sc->WordRightEndExtend();
}

void bmx_wxscintilla_setwhitespacechars(wxScintilla * sc, BBString * characters) {
	sc->SetWhitespaceChars(wxStringFromBBString(characters));
}

BBString * bmx_wxscintilla_getwhitespacechars(wxScintilla * sc) {
	return bbStringFromWxString(sc->GetWhitespaceChars());
}

void bmx_wxscintilla_setpunctuationchars(wxScintilla * sc, BBString * characters) {
	sc->SetPunctuationChars(wxStringFromBBString(characters));
}

BBString * bmx_wxscintilla_getpunctuationchars(wxScintilla * sc) {
	return bbStringFromWxString(sc->GetPunctuationChars());
}

void bmx_wxscintilla_setcharsdefault(wxScintilla * sc) {
	sc->SetCharsDefault();
}

int bmx_wxscintilla_autocompgetcurrent(wxScintilla * sc) {
	return sc->AutoCompGetCurrent();
}

void bmx_wxscintilla_autocompsetcaseinsensitivebehaviour(wxScintilla * sc, int behaviour) {
	sc->AutoCompSetCaseInsensitiveBehaviour(behaviour);
}

int bmx_wxscintilla_autocompgetcaseinsensitivebehaviour(wxScintilla * sc) {
	return sc->AutoCompGetCaseInsensitiveBehaviour();
}

void bmx_wxscintilla_allocate(wxScintilla * sc, int bytes) {
	sc->Allocate(bytes);
}

int bmx_wxscintilla_findcolumn(wxScintilla * sc, int line, int column) {
	return sc->FindColumn(line, column);
}

int bmx_wxscintilla_getcaretsticky(wxScintilla * sc) {
	return sc->GetCaretSticky();
}

void bmx_wxscintilla_setcaretsticky(wxScintilla * sc, int useCaretStickyBehaviour) {
	sc->SetCaretSticky(useCaretStickyBehaviour);
}

void bmx_wxscintilla_togglecaretsticky(wxScintilla * sc) {
	sc->ToggleCaretSticky();
}

void bmx_wxscintilla_setpasteconvertendings(wxScintilla * sc, int convert) {
	sc->SetPasteConvertEndings(convert);
}

int bmx_wxscintilla_getpasteconvertendings(wxScintilla * sc) {
	return sc->GetPasteConvertEndings();
}

void bmx_wxscintilla_selectionduplicate(wxScintilla * sc) {
	sc->SelectionDuplicate();
}

void bmx_wxscintilla_setcaretlinebackalpha(wxScintilla * sc, int alpha) {
	sc->SetCaretLineBackAlpha(alpha);
}

int bmx_wxscintilla_getcaretlinebackalpha(wxScintilla * sc) {
	return sc->GetCaretLineBackAlpha();
}

void bmx_wxscintilla_setcaretstyle(wxScintilla * sc, int caretStyle) {
	sc->SetCaretStyle(caretStyle);
}

int bmx_wxscintilla_getcaretstyle(wxScintilla * sc) {
	return sc->GetCaretStyle();
}

void bmx_wxscintilla_setindicatorcurrent(wxScintilla * sc, int indicator) {
	sc->SetIndicatorCurrent(indicator);
}

int bmx_wxscintilla_getindicatorcurrent(wxScintilla * sc) {
	return sc->GetIndicatorCurrent();
}

void bmx_wxscintilla_setindicatorvalue(wxScintilla * sc, int value) {
	sc->SetIndicatorValue(value);
}

int bmx_wxscintilla_getindicatorvalue(wxScintilla * sc) {
	return sc->GetIndicatorValue();
}

void bmx_wxscintilla_indicatorfillrange(wxScintilla * sc, int position, int fillLength) {
	sc->IndicatorFillRange(position, fillLength);
}

void bmx_wxscintilla_indicatorclearrange(wxScintilla * sc, int position, int clearLength) {
	sc->IndicatorClearRange(position, clearLength);
}

int bmx_wxscintilla_indicatorallonfor(wxScintilla * sc, int position) {
	return sc->IndicatorAllOnFor(position);
}

int bmx_wxscintilla_indicatorvalueat(wxScintilla * sc, int indicator, int position) {
	return sc->IndicatorValueAt(indicator, position);
}

int bmx_wxscintilla_indicatorstart(wxScintilla * sc, int indicator, int position) {
	return sc->IndicatorStart(indicator, position);
}

int bmx_wxscintilla_indicatorend(wxScintilla * sc, int indicator, int position) {
	return sc->IndicatorEnd(indicator, position);
}

void bmx_wxscintilla_setpositioncachesize(wxScintilla * sc, int size) {
	sc->SetPositionCacheSize(size);
}

int bmx_wxscintilla_getpositioncachesize(wxScintilla * sc) {
	return sc->GetPositionCacheSize();
}

void bmx_wxscintilla_copyallowline(wxScintilla * sc) {
	sc->CopyAllowLine();
}

int bmx_wxscintilla_getgapposition(wxScintilla * sc) {
	return sc->GetGapPosition();
}

void bmx_wxscintilla_indicatorsetalpha(wxScintilla * sc, int indicator, int alpha) {
	sc->IndicatorSetAlpha(indicator, alpha);
}

int bmx_wxscintilla_indicatorgetalpha(wxScintilla * sc, int indicator) {
	return sc->IndicatorGetAlpha(indicator);
}

void bmx_wxscintilla_indicatorsetoutlinealpha(wxScintilla * sc, int indicator, int alpha) {
	sc->IndicatorSetOutlineAlpha(indicator, alpha);
}

int bmx_wxscintilla_indicatorgetoutlinealpha(wxScintilla * sc, int indicator) {
	return sc->IndicatorGetOutlineAlpha(indicator);
}

void bmx_wxscintilla_setextraascent(wxScintilla * sc, int extraAscent) {
	sc->SetExtraAscent(extraAscent);
}

int bmx_wxscintilla_getextraascent(wxScintilla * sc) {
	return sc->GetExtraAscent();
}

void bmx_wxscintilla_setextradescent(wxScintilla * sc, int extraDescent) {
	sc->SetExtraDescent(extraDescent);
}

int bmx_wxscintilla_getextradescent(wxScintilla * sc) {
	return sc->GetExtraDescent();
}

int bmx_wxscintilla_getmarkersymboldefined(wxScintilla * sc, int markerNumber) {
	return sc->GetMarkerSymbolDefined(markerNumber);
}

void bmx_wxscintilla_marginsettext(wxScintilla * sc, int line, BBString * text) {
	sc->MarginSetText(line, wxStringFromBBString(text));
}

BBString * bmx_wxscintilla_margingettext(wxScintilla * sc, int line) {
	return bbStringFromWxString(sc->MarginGetText(line));
}

void bmx_wxscintilla_marginsetstyle(wxScintilla * sc, int line, int style) {
	sc->MarginSetStyle(line, style);
}

int bmx_wxscintilla_margingetstyle(wxScintilla * sc, int line) {
	return sc->MarginGetStyle(line);
}

void bmx_wxscintilla_marginsetstyles(wxScintilla * sc, int line, BBString * styles) {
	sc->MarginSetStyles(line, wxStringFromBBString(styles));
}

BBString * bmx_wxscintilla_margingetstyles(wxScintilla * sc, int line) {
	return bbStringFromWxString(sc->MarginGetStyles(line));
}

void bmx_wxscintilla_margintextclearall(wxScintilla * sc) {
	sc->MarginTextClearAll();
}

void bmx_wxscintilla_marginsetstyleoffset(wxScintilla * sc, int style) {
	sc->MarginSetStyleOffset(style);
}

int bmx_wxscintilla_margingetstyleoffset(wxScintilla * sc) {
	return sc->MarginGetStyleOffset();
}

void bmx_wxscintilla_setmarginoptions(wxScintilla * sc, int marginOptions) {
	sc->SetMarginOptions(marginOptions);
}

int bmx_wxscintilla_getmarginoptions(wxScintilla * sc) {
	return sc->GetMarginOptions();
}

void bmx_wxscintilla_annotationsettext(wxScintilla * sc, int line, BBString * text) {
	sc->AnnotationSetText(line, wxStringFromBBString(text));
}

BBString * bmx_wxscintilla_annotationgettext(wxScintilla * sc, int line) {
	return bbStringFromWxString(sc->AnnotationGetText(line));
}

void bmx_wxscintilla_annotationsetstyle(wxScintilla * sc, int line, int style) {
	sc->AnnotationSetStyle(line, style);
}

int bmx_wxscintilla_annotationgetstyle(wxScintilla * sc, int line) {
	return sc->AnnotationGetStyle(line);
}

void bmx_wxscintilla_annotationsetstyles(wxScintilla * sc, int line, BBString * styles) {
	sc->AnnotationSetStyles(line, wxStringFromBBString(styles));
}

BBString * bmx_wxscintilla_annotationgetstyles(wxScintilla * sc, int line) {
	return bbStringFromWxString(sc->AnnotationGetStyles(line));
}

int bmx_wxscintilla_annotationgetlines(wxScintilla * sc, int line) {
	return sc->AnnotationGetLines(line);
}

void bmx_wxscintilla_annotationclearall(wxScintilla * sc) {
	sc->AnnotationClearAll();
}

void bmx_wxscintilla_annotationsetvisible(wxScintilla * sc, int visible) {
	sc->AnnotationSetVisible(visible);
}

int bmx_wxscintilla_annotationgetvisible(wxScintilla * sc) {
	return sc->AnnotationGetVisible();
}

void bmx_wxscintilla_annotationsetstyleoffset(wxScintilla * sc, int style) {
	sc->AnnotationSetStyleOffset(style);
}

int bmx_wxscintilla_annotationgetstyleoffset(wxScintilla * sc) {
	return sc->AnnotationGetStyleOffset();
}

void bmx_wxscintilla_addundoaction(wxScintilla * sc, int token, int flags) {
	sc->AddUndoAction(token, flags);
}

int bmx_wxscintilla_charpositionfrompoint(wxScintilla * sc, int x, int y) {
	return sc->CharPositionFromPoint(x, y);
}

int bmx_wxscintilla_charpositionfrompointclose(wxScintilla * sc, int x, int y) {
	return sc->CharPositionFromPointClose(x, y);
}

void bmx_wxscintilla_setmultipleselection(wxScintilla * sc, int multipleSelection) {
	sc->SetMultipleSelection(multipleSelection);
}

int bmx_wxscintilla_getmultipleselection(wxScintilla * sc) {
	return sc->GetMultipleSelection();
}

void bmx_wxscintilla_setadditionalselectiontyping(wxScintilla * sc, int additionalSelectionTyping) {
	sc->SetAdditionalSelectionTyping(additionalSelectionTyping);
}

int bmx_wxscintilla_getadditionalselectiontyping(wxScintilla * sc) {
	return sc->GetAdditionalSelectionTyping();
}

void bmx_wxscintilla_setadditionalcaretsblink(wxScintilla * sc, int additionalCaretsBlink) {
	sc->SetAdditionalCaretsBlink(additionalCaretsBlink);
}

int bmx_wxscintilla_getadditionalcaretsblink(wxScintilla * sc) {
	return sc->GetAdditionalCaretsBlink();
}

void bmx_wxscintilla_setadditionalcaretsvisible(wxScintilla * sc, int additionalCaretsBlink) {
	sc->SetAdditionalCaretsVisible(additionalCaretsBlink);
}

int bmx_wxscintilla_getadditionalcaretsvisible(wxScintilla * sc) {
	return sc->GetAdditionalCaretsVisible();
}

int bmx_wxscintilla_getselections(wxScintilla * sc) {
	return sc->GetSelections();
}

void bmx_wxscintilla_clearselections(wxScintilla * sc) {
	sc->ClearSelections();
}

int bmx_wxscintilla_addselection(wxScintilla * sc, int caret, int anchor) {
	return sc->AddSelection(caret, anchor);
}

void bmx_wxscintilla_setmainselection(wxScintilla * sc, int selection) {
	sc->SetMainSelection(selection);
}

int bmx_wxscintilla_getmainselection(wxScintilla * sc) {
	return sc->GetMainSelection();
}

void bmx_wxscintilla_setselectionncaret(wxScintilla * sc, int selection, int pos) {
	sc->SetSelectionNCaret(selection, pos);
}

int bmx_wxscintilla_getselectionncaret(wxScintilla * sc, int selection) {
	return sc->GetSelectionNCaret(selection);
}

void bmx_wxscintilla_setselectionnanchor(wxScintilla * sc, int selection, int posAnchor) {
	sc->SetSelectionNAnchor(selection, posAnchor);
}

int bmx_wxscintilla_getselectionnanchor(wxScintilla * sc, int selection) {
	return sc->GetSelectionNAnchor(selection);
}

void bmx_wxscintilla_setselectionncaretvirtualspace(wxScintilla * sc, int selection, int space) {
	sc->SetSelectionNCaretVirtualSpace(selection, space);
}

int bmx_wxscintilla_getselectionncaretvirtualspace(wxScintilla * sc, int selection) {
	return sc->GetSelectionNCaretVirtualSpace(selection);
}

void bmx_wxscintilla_setselectionnanchorvirtualspace(wxScintilla * sc, int selection, int space) {
	sc->SetSelectionNAnchorVirtualSpace(selection, space);
}

int bmx_wxscintilla_getselectionnanchorvirtualspace(wxScintilla * sc, int selection) {
	return sc->GetSelectionNAnchorVirtualSpace(selection);
}

void bmx_wxscintilla_setselectionnstart(wxScintilla * sc, int selection, int pos) {
	sc->SetSelectionNStart(selection, pos);
}

int bmx_wxscintilla_getselectionnstart(wxScintilla * sc, int selection) {
	return sc->GetSelectionNStart(selection);
}

void bmx_wxscintilla_setselectionnend(wxScintilla * sc, int selection, int pos) {
	sc->SetSelectionNEnd(selection, pos);
}

int bmx_wxscintilla_getselectionnend(wxScintilla * sc, int selection) {
	return sc->GetSelectionNEnd(selection);
}

void bmx_wxscintilla_setrectangularselectioncaret(wxScintilla * sc, int pos) {
	sc->SetRectangularSelectionCaret(pos);
}

int bmx_wxscintilla_getrectangularselectioncaret(wxScintilla * sc) {
	return sc->GetRectangularSelectionCaret();
}

void bmx_wxscintilla_setrectangularselectionanchor(wxScintilla * sc, int posAnchor) {
	sc->SetRectangularSelectionAnchor(posAnchor);
}

int bmx_wxscintilla_getrectangularselectionanchor(wxScintilla * sc) {
	return sc->GetRectangularSelectionAnchor();
}

void bmx_wxscintilla_setrectangularselectioncaretvirtualspace(wxScintilla * sc, int space) {
	sc->SetRectangularSelectionCaretVirtualSpace(space);
}

int bmx_wxscintilla_getrectangularselectioncaretvirtualspace(wxScintilla * sc) {
	return sc->GetRectangularSelectionCaretVirtualSpace();
}

void bmx_wxscintilla_setrectangularselectionanchorvirtualspace(wxScintilla * sc, int space) {
	sc->SetRectangularSelectionAnchorVirtualSpace(space);
}

int bmx_wxscintilla_getrectangularselectionanchorvirtualspace(wxScintilla * sc) {
	return sc->GetRectangularSelectionAnchorVirtualSpace();
}

void bmx_wxscintilla_setvirtualspaceoptions(wxScintilla * sc, int virtualSpaceOptions) {
	sc->SetVirtualSpaceOptions(virtualSpaceOptions);
}

int bmx_wxscintilla_getvirtualspaceoptions(wxScintilla * sc) {
	return sc->GetVirtualSpaceOptions();
}

void bmx_wxscintilla_setrectangularselectionmodifier(wxScintilla * sc, int modifier) {
	sc->SetRectangularSelectionModifier(modifier);
}

int bmx_wxscintilla_getrectangularselectionmodifier(wxScintilla * sc) {
	return sc->GetRectangularSelectionModifier();
}

void bmx_wxscintilla_setadditionalselforeground(wxScintilla * sc, MaxColour * fore) {
	sc->SetAdditionalSelForeground(fore->Colour());
}

void bmx_wxscintilla_setadditionalselbackground(wxScintilla * sc, MaxColour * back) {
	sc->SetAdditionalSelBackground(back->Colour());
}

void bmx_wxscintilla_setadditionalselalpha(wxScintilla * sc, int alpha) {
	sc->SetAdditionalSelAlpha(alpha);
}

int bmx_wxscintilla_getadditionalselalpha(wxScintilla * sc) {
	return sc->GetAdditionalSelAlpha();
}

void bmx_wxscintilla_setadditionalcaretforeground(wxScintilla * sc, MaxColour * fore) {
	sc->SetAdditionalCaretForeground(fore->Colour());
}

MaxColour * bmx_wxscintilla_getadditionalcaretforeground(wxScintilla * sc) {
	wxColour c(sc->GetAdditionalCaretForeground());
	return new MaxColour(c);
}

void bmx_wxscintilla_rotateselection(wxScintilla * sc) {
	sc->RotateSelection();
}

void bmx_wxscintilla_swapmainanchorcaret(wxScintilla * sc) {
	sc->SwapMainAnchorCaret();
}

int bmx_wxscintilla_changelexerstate(wxScintilla * sc, int start, int end) {
	return sc->ChangeLexerState(start, end);
}

int bmx_wxscintilla_contractedfoldnext(wxScintilla * sc, int lineStart) {
	return sc->ContractedFoldNext(lineStart);
}

void bmx_wxscintilla_verticalcentrecaret(wxScintilla * sc) {
	sc->VerticalCentreCaret();
}

void bmx_wxscintilla_moveselectedlinesup(wxScintilla * sc) {
	sc->MoveSelectedLinesUp();
}

void bmx_wxscintilla_moveselectedlinesdown(wxScintilla * sc) {
	sc->MoveSelectedLinesDown();
}

void bmx_wxscintilla_setidentifier(wxScintilla * sc, int identifier) {
	sc->SetIdentifier(identifier);
}

int bmx_wxscintilla_getidentifier(wxScintilla * sc) {
	return sc->GetIdentifier();
}

void bmx_wxscintilla_rgbaimagesetwidth(wxScintilla * sc, int width) {
	sc->RGBAImageSetWidth(width);
}

void bmx_wxscintilla_rgbaimagesetheight(wxScintilla * sc, int height) {
	sc->RGBAImageSetHeight(height);
}

void bmx_wxscintilla_markerdefinergbaimage(wxScintilla * sc, int markerNumber, const unsigned char * pixels) {
	sc->MarkerDefineRGBAImage(markerNumber, pixels);
}

void bmx_wxscintilla_registerrgbaimage(wxScintilla * sc, int type, const unsigned char * pixels) {
	sc->RegisterRGBAImage(type, pixels);
}

void bmx_wxscintilla_scrolltostart(wxScintilla * sc) {
	sc->ScrollToStart();
}

void bmx_wxscintilla_scrolltoend(wxScintilla * sc) {
	sc->ScrollToEnd();
}

void bmx_wxscintilla_settechnology(wxScintilla * sc, int technology) {
	sc->SetTechnology(technology);
}

int bmx_wxscintilla_gettechnology(wxScintilla * sc) {
	return sc->GetTechnology();
}

void bmx_wxscintilla_startrecord(wxScintilla * sc) {
	sc->StartRecord();
}

void bmx_wxscintilla_stoprecord(wxScintilla * sc) {
	sc->StopRecord();
}

void bmx_wxscintilla_setlexer(wxScintilla * sc, int lexer) {
	sc->SetLexer(lexer);
}

int bmx_wxscintilla_getlexer(wxScintilla * sc) {
	return sc->GetLexer();
}

void bmx_wxscintilla_colourise(wxScintilla * sc, int start, int end) {
	sc->Colourise(start, end);
}

void bmx_wxscintilla_setproperty(wxScintilla * sc, BBString * key, BBString * value) {
	sc->SetProperty(wxStringFromBBString(key), wxStringFromBBString(value));
}

void bmx_wxscintilla_setkeywords(wxScintilla * sc, int keywordSet, BBString * keyWords) {
	sc->SetKeyWords(keywordSet, wxStringFromBBString(keyWords));
}

void bmx_wxscintilla_setlexerlanguage(wxScintilla * sc, BBString * language) {
	sc->SetLexerLanguage(wxStringFromBBString(language));
}

BBString * bmx_wxscintilla_getproperty(wxScintilla * sc, BBString * key) {
	return bbStringFromWxString(sc->GetProperty(wxStringFromBBString(key)));
}

BBString * bmx_wxscintilla_getpropertyexpanded(wxScintilla * sc, BBString * key) {
	return bbStringFromWxString(sc->GetPropertyExpanded(wxStringFromBBString(key)));
}

int bmx_wxscintilla_getpropertyint(wxScintilla * sc, BBString * key) {
	return sc->GetPropertyInt(wxStringFromBBString(key));
}

int bmx_wxscintilla_getstylebitsneeded(wxScintilla * sc) {
	return sc->GetStyleBitsNeeded();
}

BBString * bmx_wxscintilla_propertynames(wxScintilla * sc) {
	return bbStringFromWxString(sc->PropertyNames());
}

int bmx_wxscintilla_propertytype(wxScintilla * sc, BBString * name) {
	return sc->PropertyType(wxStringFromBBString(name));
}

BBString * bmx_wxscintilla_describeproperty(wxScintilla * sc, BBString * name) {
	return bbStringFromWxString(sc->DescribeProperty(wxStringFromBBString(name)));
}

BBString * bmx_wxscintilla_describekeywordsets(wxScintilla * sc) {
	return bbStringFromWxString(sc->DescribeKeyWordSets());
}

//--Autogenerated

int bmx_wxscintillaevent_getposition(wxScintillaEvent & event) {
	return event.GetPosition();
}

int bmx_wxscintillaevent_getkey(wxScintillaEvent & event) {
	return event.GetKey();
}

int bmx_wxscintillaevent_getmodifiers(wxScintillaEvent & event) {
	return event.GetModifiers();
}

int bmx_wxscintillaevent_getmodificationtype(wxScintillaEvent & event) {
	return event.GetModificationType();
}

BBString * bmx_wxscintillaevent_gettext(wxScintillaEvent & event) {
	return bbStringFromWxString(event.GetText());
}

int bmx_wxscintillaevent_getlength(wxScintillaEvent & event) {
	return event.GetLength();
}

int bmx_wxscintillaevent_getlinesadded(wxScintillaEvent & event) {
	return event.GetLinesAdded();
}

int bmx_wxscintillaevent_getline(wxScintillaEvent & event) {
	return event.GetLine();
}

int bmx_wxscintillaevent_getfoldlevelnow(wxScintillaEvent & event) {
	return event.GetFoldLevelNow();
}

int bmx_wxscintillaevent_getfoldlevelprev(wxScintillaEvent & event) {
	return event.GetFoldLevelPrev();
}

int bmx_wxscintillaevent_getmargin(wxScintillaEvent & event) {
	return event.GetMargin();
}

int bmx_wxscintillaevent_getmessage(wxScintillaEvent & event) {
	return event.GetMessage();
}

int bmx_wxscintillaevent_getwparam(wxScintillaEvent & event) {
	return event.GetWParam();
}

int bmx_wxscintillaevent_getlparam(wxScintillaEvent & event) {
	return event.GetLParam();
}

int bmx_wxscintillaevent_getlisttype(wxScintillaEvent & event) {
	return event.GetListType();
}

int bmx_wxscintillaevent_getx(wxScintillaEvent & event) {
	return event.GetX();
}

int bmx_wxscintillaevent_gety(wxScintillaEvent & event) {
	return event.GetY();
}

BBString * bmx_wxscintillaevent_getdragtext(wxScintillaEvent & event) {
	return bbStringFromWxString(event.GetDragText());
}

int bmx_wxscintillaevent_getdragallowmove(wxScintillaEvent & event) {
	return static_cast<int>(event.GetDragAllowMove());
}

int bmx_wxscintillaevent_getshift(wxScintillaEvent & event) {
	return static_cast<int>(event.GetShift());
}

int bmx_wxscintillaevent_getcontrol(wxScintillaEvent & event) {
	return static_cast<int>(event.GetControl());
}

int bmx_wxscintillaevent_getalt(wxScintillaEvent & event) {
	return static_cast<int>(event.GetAlt());
}


int bmx_wxscintilla_geteventtype(int type) {
	switch(type) {
		case 1650: return wxEVT_STC_CHANGE;
		case 1651: return wxEVT_STC_STYLENEEDED;
		case 1652: return wxEVT_STC_CHARADDED;
		case 1653: return wxEVT_STC_SAVEPOINTREACHED;
		case 1654: return wxEVT_STC_SAVEPOINTLEFT;
		case 1655: return wxEVT_STC_ROMODIFYATTEMPT;
		case 1656: return wxEVT_STC_KEY;
		case 1657: return wxEVT_STC_DOUBLECLICK;
		case 1658: return wxEVT_STC_UPDATEUI;
		case 1659: return wxEVT_STC_MODIFIED;
		case 1660: return wxEVT_STC_MACRORECORD;
		case 1661: return wxEVT_STC_MARGINCLICK;
		case 1662: return wxEVT_STC_NEEDSHOWN;
		case 1664: return wxEVT_STC_PAINTED;
		case 1665: return wxEVT_STC_USERLISTSELECTION;
		case 1666: return wxEVT_STC_URIDROPPED;
		case 1667: return wxEVT_STC_DWELLSTART;
		case 1668: return wxEVT_STC_DWELLEND;
		case 1669: return wxEVT_STC_START_DRAG;
		case 1670: return wxEVT_STC_DRAG_OVER;
		case 1671: return wxEVT_STC_DO_DROP;
		case 1672: return wxEVT_STC_ZOOM;
		case 1673: return wxEVT_STC_HOTSPOT_CLICK;
		case 1674: return wxEVT_STC_HOTSPOT_DCLICK;
		case 1675: return wxEVT_STC_CALLTIP_CLICK;
		case 1676: return wxEVT_STC_AUTOCOMP_SELECTION;
        case 1677: return wxEVT_STC_INDICATOR_CLICK;
        case 1678: return wxEVT_STC_INDICATOR_RELEASE;
        case 1679: return wxEVT_STC_AUTOCOMP_CANCELLED;
        case 1680: return wxEVT_STC_AUTOCOMP_CHAR_DELETED;
        case 1681: return wxEVT_STC_HOTSPOT_RELEASE_CLICK;
	}
	
	return 0;
}


